#python 位运算

#左移操作：如8 << 2 ，表示在原来8的基础上*2^2
#左移一位表示乘以2

print(bin(8))
print(8<<2) # 8的二进制为 0000 1000 ----左移两位-----0010 0000 结果为42

#右移 ：如8>>2 ,表示在原来的基础上除以2^2
#右移一位表示除以2

print(8>>2) #结果为8//4

print(8>>1) #结果为8//2

#& 运算：& 运算的时候，全为1则为1,按位与运算找到两个数值相同的部分
# 可以帮助判断奇偶性
  #8&1==0 偶数
  #3&1=1  奇数
  #通过奇偶性来判断一些东西

1 #0b001
3 #0b011
#结果为：001

print(1&3)

#按位或运算：1|3 ，有1则为1
print(1|3)


#按位异或运算 ：相等的1则结果为0，不等为1,结果中为1的部分即为两者二进制不同的地方

'''
按位异或的特点：自己和自己异或结果为0，0和值异或结果都为该值。
按位异或主要用途：
    寻找一系列整数种出现一次的值—这种查找的方法的前提是其他数字都出现偶数次，且只有一个数字出现了一次
    进行变量替换——a,b=b,a 还可以使用异或来实现，a=a^b,b=b^a,a=b^a
'''

#计算一个数值的二进制数中有多少个1，如果是奇数则和1进行与运算时结果为1，奇数一定有1 ，找到一个1之后要右移1位继续找
#但是有的时候会有很多连续的0，如何跳过
def getnumber1(number):
    count=0
    while number:
        count+=(number&1)
        number=number>>1 #不断地在减半，但是这个过程并不没有统计到1的个数，只是增加了循环的次数
    return count
#或者可以以下方式进行
#只要不是0,总会有一个1
def getnumber1_2(number):
    count=0
    while number:
        count+=1
        number=number&(number-1)
    return number
